/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/sticky-js";
exports.ids = ["vendor-chunks/sticky-js"];
exports.modules = {

/***/ "(ssr)/./node_modules/sticky-js/dist/sticky.compile.js":
/*!*******************************************************!*\
  !*** ./node_modules/sticky-js/dist/sticky.compile.js ***!
  \*******************************************************/
/***/ (function(module) {

eval("function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * Sticky.js\n * Library for sticky elements written in vanilla javascript. With this library you can easily set sticky elements on your website. It's also responsive.\n *\n * @version 1.3.0\n * @author Rafal Galus <biuro@rafalgalus.pl>\n * @website https://rgalus.github.io/sticky-js/\n * @repo https://github.com/rgalus/sticky-js\n * @license https://github.com/rgalus/sticky-js/blob/master/LICENSE\n */\nvar Sticky = /*#__PURE__*/function () {\n  /**\n   * Sticky instance constructor\n   * @constructor\n   * @param {string} selector - Selector which we can find elements\n   * @param {string} options - Global options for sticky elements (could be overwritten by data-{option}=\"\" attributes)\n   */\n  function Sticky() {\n    var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Sticky);\n\n    this.selector = selector;\n    this.elements = [];\n    this.version = '1.3.0';\n    this.vp = this.getViewportSize();\n    this.body = document.querySelector('body');\n    this.options = {\n      wrap: options.wrap || false,\n      wrapWith: options.wrapWith || '<span></span>',\n      marginTop: options.marginTop || 0,\n      marginBottom: options.marginBottom || 0,\n      stickyFor: options.stickyFor || 0,\n      stickyClass: options.stickyClass || null,\n      stickyContainer: options.stickyContainer || 'body'\n    };\n    this.updateScrollTopPosition = this.updateScrollTopPosition.bind(this);\n    this.updateScrollTopPosition();\n    window.addEventListener('load', this.updateScrollTopPosition);\n    window.addEventListener('scroll', this.updateScrollTopPosition);\n    this.run();\n  }\n  /**\n   * Function that waits for page to be fully loaded and then renders & activates every sticky element found with specified selector\n   * @function\n   */\n\n\n  _createClass(Sticky, [{\n    key: \"run\",\n    value: function run() {\n      var _this = this;\n\n      // wait for page to be fully loaded\n      var pageLoaded = setInterval(function () {\n        if (document.readyState === 'complete') {\n          clearInterval(pageLoaded);\n          var elements = document.querySelectorAll(_this.selector);\n\n          _this.forEach(elements, function (element) {\n            return _this.renderElement(element);\n          });\n        }\n      }, 10);\n    }\n    /**\n     * Function that assign needed variables for sticky element, that are used in future for calculations and other\n     * @function\n     * @param {node} element - Element to be rendered\n     */\n\n  }, {\n    key: \"renderElement\",\n    value: function renderElement(element) {\n      var _this2 = this;\n\n      // create container for variables needed in future\n      element.sticky = {}; // set default variables\n\n      element.sticky.active = false;\n      element.sticky.marginTop = parseInt(element.getAttribute('data-margin-top')) || this.options.marginTop;\n      element.sticky.marginBottom = parseInt(element.getAttribute('data-margin-bottom')) || this.options.marginBottom;\n      element.sticky.stickyFor = parseInt(element.getAttribute('data-sticky-for')) || this.options.stickyFor;\n      element.sticky.stickyClass = element.getAttribute('data-sticky-class') || this.options.stickyClass;\n      element.sticky.wrap = element.hasAttribute('data-sticky-wrap') ? true : this.options.wrap; // @todo attribute for stickyContainer\n      // element.sticky.stickyContainer = element.getAttribute('data-sticky-container') || this.options.stickyContainer;\n\n      element.sticky.stickyContainer = this.options.stickyContainer;\n      element.sticky.container = this.getStickyContainer(element);\n      element.sticky.container.rect = this.getRectangle(element.sticky.container);\n      element.sticky.rect = this.getRectangle(element); // fix when element is image that has not yet loaded and width, height = 0\n\n      if (element.tagName.toLowerCase() === 'img') {\n        element.onload = function () {\n          return element.sticky.rect = _this2.getRectangle(element);\n        };\n      }\n\n      if (element.sticky.wrap) {\n        this.wrapElement(element);\n      } // activate rendered element\n\n\n      this.activate(element);\n    }\n    /**\n     * Wraps element into placeholder element\n     * @function\n     * @param {node} element - Element to be wrapped\n     */\n\n  }, {\n    key: \"wrapElement\",\n    value: function wrapElement(element) {\n      element.insertAdjacentHTML('beforebegin', element.getAttribute('data-sticky-wrapWith') || this.options.wrapWith);\n      element.previousSibling.appendChild(element);\n    }\n    /**\n     * Function that activates element when specified conditions are met and then initalise events\n     * @function\n     * @param {node} element - Element to be activated\n     */\n\n  }, {\n    key: \"activate\",\n    value: function activate(element) {\n      if (element.sticky.rect.top + element.sticky.rect.height < element.sticky.container.rect.top + element.sticky.container.rect.height && element.sticky.stickyFor < this.vp.width && !element.sticky.active) {\n        element.sticky.active = true;\n      }\n\n      if (this.elements.indexOf(element) < 0) {\n        this.elements.push(element);\n      }\n\n      if (!element.sticky.resizeEvent) {\n        this.initResizeEvents(element);\n        element.sticky.resizeEvent = true;\n      }\n\n      if (!element.sticky.scrollEvent) {\n        this.initScrollEvents(element);\n        element.sticky.scrollEvent = true;\n      }\n\n      this.setPosition(element);\n    }\n    /**\n     * Function which is adding onResizeEvents to window listener and assigns function to element as resizeListener\n     * @function\n     * @param {node} element - Element for which resize events are initialised\n     */\n\n  }, {\n    key: \"initResizeEvents\",\n    value: function initResizeEvents(element) {\n      var _this3 = this;\n\n      element.sticky.resizeListener = function () {\n        return _this3.onResizeEvents(element);\n      };\n\n      window.addEventListener('resize', element.sticky.resizeListener);\n    }\n    /**\n     * Removes element listener from resize event\n     * @function\n     * @param {node} element - Element from which listener is deleted\n     */\n\n  }, {\n    key: \"destroyResizeEvents\",\n    value: function destroyResizeEvents(element) {\n      window.removeEventListener('resize', element.sticky.resizeListener);\n    }\n    /**\n     * Function which is fired when user resize window. It checks if element should be activated or deactivated and then run setPosition function\n     * @function\n     * @param {node} element - Element for which event function is fired\n     */\n\n  }, {\n    key: \"onResizeEvents\",\n    value: function onResizeEvents(element) {\n      this.vp = this.getViewportSize();\n      element.sticky.rect = this.getRectangle(element);\n      element.sticky.container.rect = this.getRectangle(element.sticky.container);\n\n      if (element.sticky.rect.top + element.sticky.rect.height < element.sticky.container.rect.top + element.sticky.container.rect.height && element.sticky.stickyFor < this.vp.width && !element.sticky.active) {\n        element.sticky.active = true;\n      } else if (element.sticky.rect.top + element.sticky.rect.height >= element.sticky.container.rect.top + element.sticky.container.rect.height || element.sticky.stickyFor >= this.vp.width && element.sticky.active) {\n        element.sticky.active = false;\n      }\n\n      this.setPosition(element);\n    }\n    /**\n     * Function which is adding onScrollEvents to window listener and assigns function to element as scrollListener\n     * @function\n     * @param {node} element - Element for which scroll events are initialised\n     */\n\n  }, {\n    key: \"initScrollEvents\",\n    value: function initScrollEvents(element) {\n      var _this4 = this;\n\n      element.sticky.scrollListener = function () {\n        return _this4.onScrollEvents(element);\n      };\n\n      window.addEventListener('scroll', element.sticky.scrollListener);\n    }\n    /**\n     * Removes element listener from scroll event\n     * @function\n     * @param {node} element - Element from which listener is deleted\n     */\n\n  }, {\n    key: \"destroyScrollEvents\",\n    value: function destroyScrollEvents(element) {\n      window.removeEventListener('scroll', element.sticky.scrollListener);\n    }\n    /**\n     * Function which is fired when user scroll window. If element is active, function is invoking setPosition function\n     * @function\n     * @param {node} element - Element for which event function is fired\n     */\n\n  }, {\n    key: \"onScrollEvents\",\n    value: function onScrollEvents(element) {\n      if (element.sticky && element.sticky.active) {\n        this.setPosition(element);\n      }\n    }\n    /**\n     * Main function for the library. Here are some condition calculations and css appending for sticky element when user scroll window\n     * @function\n     * @param {node} element - Element that will be positioned if it's active\n     */\n\n  }, {\n    key: \"setPosition\",\n    value: function setPosition(element) {\n      this.css(element, {\n        position: '',\n        width: '',\n        top: '',\n        left: ''\n      });\n\n      if (this.vp.height < element.sticky.rect.height || !element.sticky.active) {\n        return;\n      }\n\n      if (!element.sticky.rect.width) {\n        element.sticky.rect = this.getRectangle(element);\n      }\n\n      if (element.sticky.wrap) {\n        this.css(element.parentNode, {\n          display: 'block',\n          width: element.sticky.rect.width + 'px',\n          height: element.sticky.rect.height + 'px'\n        });\n      }\n\n      if (element.sticky.rect.top === 0 && element.sticky.container === this.body) {\n        this.css(element, {\n          position: 'fixed',\n          top: element.sticky.rect.top + 'px',\n          left: element.sticky.rect.left + 'px',\n          width: element.sticky.rect.width + 'px'\n        });\n\n        if (element.sticky.stickyClass) {\n          element.classList.add(element.sticky.stickyClass);\n        }\n      } else if (this.scrollTop > element.sticky.rect.top - element.sticky.marginTop) {\n        this.css(element, {\n          position: 'fixed',\n          width: element.sticky.rect.width + 'px',\n          left: element.sticky.rect.left + 'px'\n        });\n\n        if (this.scrollTop + element.sticky.rect.height + element.sticky.marginTop > element.sticky.container.rect.top + element.sticky.container.offsetHeight - element.sticky.marginBottom) {\n          if (element.sticky.stickyClass) {\n            element.classList.remove(element.sticky.stickyClass);\n          }\n\n          this.css(element, {\n            top: element.sticky.container.rect.top + element.sticky.container.offsetHeight - (this.scrollTop + element.sticky.rect.height + element.sticky.marginBottom) + 'px'\n          });\n        } else {\n          if (element.sticky.stickyClass) {\n            element.classList.add(element.sticky.stickyClass);\n          }\n\n          this.css(element, {\n            top: element.sticky.marginTop + 'px'\n          });\n        }\n      } else {\n        if (element.sticky.stickyClass) {\n          element.classList.remove(element.sticky.stickyClass);\n        }\n\n        this.css(element, {\n          position: '',\n          width: '',\n          top: '',\n          left: ''\n        });\n\n        if (element.sticky.wrap) {\n          this.css(element.parentNode, {\n            display: '',\n            width: '',\n            height: ''\n          });\n        }\n      }\n    }\n    /**\n     * Function that updates element sticky rectangle (with sticky container), then activate or deactivate element, then update position if it's active\n     * @function\n     */\n\n  }, {\n    key: \"update\",\n    value: function update() {\n      var _this5 = this;\n\n      this.forEach(this.elements, function (element) {\n        element.sticky.rect = _this5.getRectangle(element);\n        element.sticky.container.rect = _this5.getRectangle(element.sticky.container);\n\n        _this5.activate(element);\n\n        _this5.setPosition(element);\n      });\n    }\n    /**\n     * Destroys sticky element, remove listeners\n     * @function\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _this6 = this;\n\n      window.removeEventListener('load', this.updateScrollTopPosition);\n      window.removeEventListener('scroll', this.updateScrollTopPosition);\n      this.forEach(this.elements, function (element) {\n        _this6.destroyResizeEvents(element);\n\n        _this6.destroyScrollEvents(element);\n\n        delete element.sticky;\n      });\n    }\n    /**\n     * Function that returns container element in which sticky element is stuck (if is not specified, then it's stuck to body)\n     * @function\n     * @param {node} element - Element which sticky container are looked for\n     * @return {node} element - Sticky container\n     */\n\n  }, {\n    key: \"getStickyContainer\",\n    value: function getStickyContainer(element) {\n      var container = element.parentNode;\n\n      while (!container.hasAttribute('data-sticky-container') && !container.parentNode.querySelector(element.sticky.stickyContainer) && container !== this.body) {\n        container = container.parentNode;\n      }\n\n      return container;\n    }\n    /**\n     * Function that returns element rectangle & position (width, height, top, left)\n     * @function\n     * @param {node} element - Element which position & rectangle are returned\n     * @return {object}\n     */\n\n  }, {\n    key: \"getRectangle\",\n    value: function getRectangle(element) {\n      this.css(element, {\n        position: '',\n        width: '',\n        top: '',\n        left: ''\n      });\n      var width = Math.max(element.offsetWidth, element.clientWidth, element.scrollWidth);\n      var height = Math.max(element.offsetHeight, element.clientHeight, element.scrollHeight);\n      var top = 0;\n      var left = 0;\n\n      do {\n        top += element.offsetTop || 0;\n        left += element.offsetLeft || 0;\n        element = element.offsetParent;\n      } while (element);\n\n      return {\n        top: top,\n        left: left,\n        width: width,\n        height: height\n      };\n    }\n    /**\n     * Function that returns viewport dimensions\n     * @function\n     * @return {object}\n     */\n\n  }, {\n    key: \"getViewportSize\",\n    value: function getViewportSize() {\n      return {\n        width: Math.max(document.documentElement.clientWidth, window.innerWidth || 0),\n        height: Math.max(document.documentElement.clientHeight, window.innerHeight || 0)\n      };\n    }\n    /**\n     * Function that updates window scroll position\n     * @function\n     * @return {number}\n     */\n\n  }, {\n    key: \"updateScrollTopPosition\",\n    value: function updateScrollTopPosition() {\n      this.scrollTop = (window.pageYOffset || document.scrollTop) - (document.clientTop || 0) || 0;\n    }\n    /**\n     * Helper function for loops\n     * @helper\n     * @param {array}\n     * @param {function} callback - Callback function (no need for explanation)\n     */\n\n  }, {\n    key: \"forEach\",\n    value: function forEach(array, callback) {\n      for (var i = 0, len = array.length; i < len; i++) {\n        callback(array[i]);\n      }\n    }\n    /**\n     * Helper function to add/remove css properties for specified element.\n     * @helper\n     * @param {node} element - DOM element\n     * @param {object} properties - CSS properties that will be added/removed from specified element\n     */\n\n  }, {\n    key: \"css\",\n    value: function css(element, properties) {\n      for (var property in properties) {\n        if (properties.hasOwnProperty(property)) {\n          element.style[property] = properties[property];\n        }\n      }\n    }\n  }]);\n\n  return Sticky;\n}();\n/**\n * Export function that supports AMD, CommonJS and Plain Browser.\n */\n\n\n(function (root, factory) {\n  if (true) {\n    module.exports = factory;\n  } else {}\n})(this, Sticky);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sticky-js/dist/sticky.compile.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sticky-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/sticky-js/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar Sticky = __webpack_require__(/*! ./dist/sticky.compile.js */ \"(ssr)/./node_modules/sticky-js/dist/sticky.compile.js\");\n\nmodule.exports = Sticky;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RpY2t5LWpzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFDQSxhQUFhLG1CQUFPLENBQUMsdUZBQTBCOztBQUUvQyIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJiZWxseS1uZXh0anMvLi9ub2RlX21vZHVsZXMvc3RpY2t5LWpzL2luZGV4LmpzP2YwMjEiXSwic291cmNlc0NvbnRlbnQiOlsiXG52YXIgU3RpY2t5ID0gcmVxdWlyZSgnLi9kaXN0L3N0aWNreS5jb21waWxlLmpzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3RpY2t5O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sticky-js/index.js\n");

/***/ })

};
;